@startuml C4_Elements
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml

LAYOUT_WITH_LEGEND()

Person(user, "User", "The SecHub user")
Person(admin, "Administrator", "The SecHub administrator")
Person(developer, "Developer", "The SecHub developer")

System_Boundary(sechub, "SecHub") {
	Container(kubernetes, "Kubernetes Endpoint", "REST, Kubernetes", "Administrative access")
	Container(sechub_server, "SecHub Server", "Java, Spring MVC, Tomcat", "Schedules scans for user.")
	Container(db, "Database", "PostgreSQL", "Stores scan and user information.")
	Container(scan, "Scan", "SAST, Java, Spring MVC, Tomcat, Scan, Container", "Does static application security testing (SAST).")
	Container(zap, "OWASP ZAP", "DAST, Java, Spring MVC, Tomcat, OWASP ZAP, Container", "Does dynamic application security testing (DAST).")
	Container(w3af, "w3af", "DAST, Java, Spring MVC, Tomcat, w3af, Container", "Does dynamic application security testing (DAST).")
	Container(openvas, "OpenVAS", "InfraScan, Java, Spring MVC, Tomcat, OpenVAS, Container", "Does infrastructure scan of system.")    
}

System_Boundary(ci_cd, "CI/CD Server") {
	Container(ci_cd_tool, "CI/CD Tool", "Jenkins", "Building, testing, deploying SecHub")
	Container(docker, "Docker", "Docker Deamon", "Building container images")
	Container(ssh, "SSH", "SSH Server", "For administrative access")
}

System_Ext(object_storage, "Object Storage", "The object storage")
System_Ext(user_system, "User System", "A user system or systems to scan")
System_Ext(container_registry, "Container Registry", "The container registry")
System_Ext(git_server, "Git Server", "The git server with source code")
System_Ext(logging, "Logging", "The log server")

Rel(user, sechub_server, "uses SecHub for security testing", "REST/HTTP")
Rel(sechub_server, object_storage, "stores source code", "REST/HTTP")
Rel(sechub_server, db, "stores user and scan information", "Postgres")
Rel(sechub_server, scan, "scans source code", "REST/HTTP")
Rel(sechub_server, zap, "initiates scan", "REST/HTTP")
Rel(sechub_server, w3af, "initiates scan", "REST/HTTP")
Rel(sechub_server, openvas, "initiates scan", "REST/HTTP")
Rel(zap, user_system, "scans application", "HTTP")
Rel(w3af, user_system, "scans application", "HTTP")
Rel(openvas, user_system, "scans system", "Several Protocols")
Rel(kubernetes, container_registry, "pulls containers", "REST/HTTP")
Rel(ci_cd_tool, kubernetes, "deploys sechub", "REST/HTTP")
Rel(docker, container_registry, "pushes container to registry", "REST/HTTP")
Rel(ci_cd_tool, git_server, "downloads source code", "SSH/HTTP")
Rel(ci_cd_tool, docker, "initiates build of container", "Localhost/SOCKET")
Rel(sechub_server, logging, "logs", "REST/HTTP")
Rel(db, logging, "logs", "REST/HTTP")
Rel(admin, ssh, "access", "SSH")
Rel(admin, kubernetes, "access", "REST/HTTP")
Rel(developer, ci_cd_tool, "builds")
Rel(developer, git_server, "pushes code changes", "SSH/HTTP")
@enduml